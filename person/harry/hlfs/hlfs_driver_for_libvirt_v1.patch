From 57c43f96fec5d9544b85955e59ee56d78782378c Mon Sep 17 00:00:00 2001
From: Harry Wei <harryxiyou@gmail.com>
Date: Mon, 28 Jan 2013 19:33:37 +0800
Subject: [PATCH] HLFS driver for Libvirt v1

---
 docs/schemas/domain.rng |    1 +
 src/conf/domain_conf.c  |    3 +-
 src/conf/domain_conf.h  |    1 +
 src/qemu/qemu_conf.c    |  114 +++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 118 insertions(+), 1 deletions(-)

diff --git a/docs/schemas/domain.rng b/docs/schemas/domain.rng
index 4463884..fe8fdda 100644
--- a/docs/schemas/domain.rng
+++ b/docs/schemas/domain.rng
@@ -624,6 +624,7 @@
                     <value>nbd</value>
                     <value>rbd</value>
                     <value>sheepdog</value>
+                    <value>hlfs</value>
                   </choice>
                 </attribute>
                 <attribute name="name"/>
diff --git a/src/conf/domain_conf.c b/src/conf/domain_conf.c
index 4d11856..f19865a 100644
--- a/src/conf/domain_conf.c
+++ b/src/conf/domain_conf.c
@@ -145,7 +145,8 @@ VIR_ENUM_IMPL(virDomainDiskErrorPolicy, VIR_DOMAIN_DISK_ERROR_POLICY_LAST,
 VIR_ENUM_IMPL(virDomainDiskProtocol, VIR_DOMAIN_DISK_PROTOCOL_LAST,
               "nbd",
               "rbd",
-              "sheepdog")
+              "sheepdog",
+              "hlfs")
 
 VIR_ENUM_IMPL(virDomainController, VIR_DOMAIN_CONTROLLER_TYPE_LAST,
               "ide",
diff --git a/src/conf/domain_conf.h b/src/conf/domain_conf.h
index e62320d..1697511 100644
--- a/src/conf/domain_conf.h
+++ b/src/conf/domain_conf.h
@@ -169,6 +169,7 @@ enum virDomainDiskProtocol {
     VIR_DOMAIN_DISK_PROTOCOL_NBD,
     VIR_DOMAIN_DISK_PROTOCOL_RBD,
     VIR_DOMAIN_DISK_PROTOCOL_SHEEPDOG,
+    VIR_DOMAIN_DISK_PROTOCOL_HLFS,
 
     VIR_DOMAIN_DISK_PROTOCOL_LAST
 };
diff --git a/src/qemu/qemu_conf.c b/src/qemu/qemu_conf.c
index c14005e..2dd0363 100644
--- a/src/qemu/qemu_conf.c
+++ b/src/qemu/qemu_conf.c
@@ -2786,6 +2786,15 @@ qemuBuildDriveStr(virDomainDiskDefPtr disk,
                     virBufferVSprintf(&opt, "file=sheepdog:%s:%s:%s,",
                                       disk->hosts->name, disk->hosts->port,
                                       disk->src);
+				/*Add HLFS driver*/
+            case VIR_DOMAIN_DISK_PROTOCOL_HLFS:
+                if (disk->nhosts == 0)
+                    virBufferVSprintf(&opt, "file=hlfs:%s,", disk->src);
+                else
+                    /* only one host is supported now */
+                    virBufferVSprintf(&opt, "file=hlfs:%s:%s:%s,",
+                                      disk->hosts->name, disk->hosts->port,
+                                      disk->src);
                 break;
             }
         } else {
@@ -4709,6 +4718,14 @@ qemudBuildCommandLine(virConnectPtr conn,
                         snprintf(file, PATH_MAX, "sheepdog:%s:%s:%s,",
                                  disk->hosts->name, disk->hosts->port,
                                  disk->src);
+                case VIR_DOMAIN_DISK_PROTOCOL_HLFS:
+                    if (disk->nhosts == 0)
+                        snprintf(file, PATH_MAX, "hlfs:%s,", disk->src);
+                    else
+                        /* only one host is supported now */
+                        snprintf(file, PATH_MAX, "hlfs:%s:%s:%s,",
+                                 disk->hosts->name, disk->hosts->port,
+                                 disk->src);
                     break;
                 }
             } else {
@@ -5812,6 +5829,58 @@ qemuParseCommandLineDisk(virCapsPtr caps,
                     }
 
                     VIR_FREE(p);
+                } else if (STRPREFIX(def->src, "hlfs:")) {
+                    char *p = def->src;
+                    char *port, *vdi;
+
+                    def->type = VIR_DOMAIN_DISK_TYPE_NETWORK;
+                    def->src = strdup(p + strlen("hlfs:"));
+                    if (!def->src) {
+                        virReportOOMError();
+                        goto cleanup;
+                    }
+
+                    /* def->src must be [vdiname] or [host]:[port]:[vdiname]
+					   * TODO?: HLFS file name format must be one of the following:
+					   * 1. [vdiname]
+					   * 2. [vdiname]%[snapshot]
+					   * vdiname format --
+					   * local:///tmp/testenv/testfs
+					   * hdfs:///tmp/testenv/testfs
+					   * hdfs://localhost:8020/tmp/testenv/testfs
+					   * hdfs://localhost/tmp/testenv/testfs
+					   * hdfs://192.168.0.1:8020/tmp/testenv/testfs
+					 */
+                    port = strchr(def->src, ':');
+                    if (port) {
+                        *port++ = '\0';
+                        vdi = strchr(port, ':');
+                        if (!vdi) {
+                            def = NULL;
+                            qemuReportError(VIR_ERR_INTERNAL_ERROR,
+                                            _("cannot parse hlfs filename '%s'"), p);
+                            goto cleanup;
+                        }
+                        *vdi++ = '\0';
+                        if (VIR_ALLOC(def->hosts) < 0) {
+                            virReportOOMError();
+                            goto cleanup;
+                        }
+                        def->nhosts = 1;
+                        def->hosts->name = def->src;
+                        def->hosts->port = strdup(port);
+                        if (!def->hosts->port) {
+                            virReportOOMError();
+                            goto cleanup;
+                        }
+                        def->src = strdup(vdi);
+                        if (!def->src) {
+                            virReportOOMError();
+                            goto cleanup;
+                        }
+                    }
+
+                    VIR_FREE(p);
                 } else
                     def->type = VIR_DOMAIN_DISK_TYPE_FILE;
             } else {
@@ -6761,6 +6830,10 @@ virDomainDefPtr qemuParseCommandLine(virCapsPtr caps,
                 disk->type = VIR_DOMAIN_DISK_TYPE_NETWORK;
                 disk->protocol = VIR_DOMAIN_DISK_PROTOCOL_SHEEPDOG;
                 val += strlen("sheepdog:");
+            } else if (STRPREFIX(val, "hlfs:")) {
+                disk->type = VIR_DOMAIN_DISK_TYPE_NETWORK;
+                disk->protocol = VIR_DOMAIN_DISK_PROTOCOL_HLFS;
+                val += strlen("hlfs:");
             } else
                 disk->type = VIR_DOMAIN_DISK_TYPE_FILE;
             if (STREQ(arg, "-cdrom")) {
@@ -6843,6 +6916,47 @@ virDomainDefPtr qemuParseCommandLine(virCapsPtr caps,
                             goto error;
                         }
                     }
+                case VIR_DOMAIN_DISK_PROTOCOL_HLFS:
+                    /* disk->src must be [vdiname] or [host]:[port]:[vdiname]
+					   * TODO?: HLFS file name format must be one of the following:
+					   * 1. [vdiname]
+					   * 2. [vdiname]%[snapshot]
+					   * vdiname format --
+					   * local:///tmp/testenv/testfs
+					   * hdfs:///tmp/testenv/testfs
+					   * hdfs://localhost:8020/tmp/testenv/testfs
+					   * hdfs://localhost/tmp/testenv/testfs
+					   * hdfs://192.168.0.1:8020/tmp/testenv/testfs
+					 */
+                    port = strchr(disk->src, ':');
+                    if (port) {
+                        char *vdi;
+
+                        *port++ = '\0';
+                        vdi = strchr(port, ':');
+                        if (!vdi) {
+                            qemuReportError(VIR_ERR_INTERNAL_ERROR,
+                                            _("cannot parse hlfs filename '%s'"), val);
+                            goto error;
+                        }
+                        *vdi++ = '\0';
+                        if (VIR_ALLOC(disk->hosts) < 0) {
+                            virReportOOMError();
+                            goto error;
+                        }
+                        disk->nhosts = 1;
+                        disk->hosts->name = disk->src;
+                        disk->hosts->port = strdup(port);
+                        if (!disk->hosts->port) {
+                            virReportOOMError();
+                            goto error;
+                        }
+                        disk->src = strdup(vdi);
+                        if (!disk->src) {
+                            virReportOOMError();
+                            goto error;
+                        }
+                    }
                     break;
                 }
             }
-- 
1.7.0.4

